import rospkg
import subprocess
import os
import time
import shutil
import re

# === requirements for the build machine ==
# sudo apt-get install ruby-dev
# sudo gem update --system
# sudo gem install package_cloud
# == OR ==
# curl -s https://packagecloud.io/install/repositories/fdio/tutorial/script.deb.sh | sudo bash

PACKAGE_CLOUD_API_TOKEN = "8d39c5b27610801b6500707ed36ae5cb9220a37c9e63d5b4"
REPONAME = "smacc"


def build_deb_package(workspace_source_folder, package_name, packagepath, ubuntu_version, ros_distro):
    print("-----------------------")
    print("Working folder: " + str(os.getcwd()))
    print("Building debian package: " + str(package_name))
    cmd = "bloom-generate rosdebian --os-name ubuntu --os-version " + \
        str(ubuntu_version) + " --ros-distro " + \
        str(ros_distro) + " " + str(packagepath)
    print(cmd)
    bloomprocess = subprocess.Popen(cmd, shell=True)
    bloomprocess.wait()

    develpackagefolder = None
    for root, dirs, files in os.walk(workspace_source_folder, topdown=False):
        if "package.xml" in files and package_name == root.split("/")[-1]:
            print(root)
            develpackagefolder = root
            break

    localpackagepath = develpackagefolder
    # copy the debian folder generated by bloom inside the package
    shutil.move("debian", os.path.join(localpackagepath, "debian"))

    os.chdir(localpackagepath)
    fakerootprocess = subprocess.Popen(
        "fakeroot debian/rules binary", shell=True)
    fakerootprocess.wait()

    os.chdir(localpackagepath)
    shutil.rmtree("debian")
    shutil.rmtree("obj-x86_64-linux-gnu")

    os.chdir(workspace_source_folder)

    # improve this regex
    regexstr = 'ros-' + ros_distro + '-'+package_name.replace("_", "-")+".*deb"
    print("Finding deb package: " + str(regexstr))
    thisfolderfiles = os.listdir(workspace_source_folder)
    debianfilename = [f for f in thisfolderfiles if re.search(
        regexstr, f)][0]
    print(debianfilename)

    installdebiantask = subprocess.Popen(
        "sudo dpkg -i " + debianfilename, shell=True)
    installdebiantask.wait()

    return debianfilename

#CONFIGURE THIS PATH
workspace_folder = os.path.abspath(os.path.join(os.getcwd(), "../.."))

relative_smacc_folder = "src/SMACC"
workspace_source_folder = os.path.join(workspace_folder, relative_smacc_folder)

rospack = rospkg.RosPack()
packages = rospack.list()
packagesl = list(packages)

identified_install_packages = {}
exclude_with_words = ["ridgeback", "mecanum", "catkin"]
for pname in packagesl:
    packpath = rospack.get_path(pname)
    if workspace_folder in packpath:
        if any([True for excludedword in exclude_with_words if excludedword in pname]):
            continue

        identified_install_packages[pname] = packpath

manual_order_packages = ['forward_global_planner',
                         'backward_global_planner',
                         'backward_local_planner',
                         'forward_local_planner',
                         'smacc_msgs'
                         'smacc',
                         'smacc_rviz_plugin',
                         'all_events_go',
                         'conditional',
                         'event_countdown',
                         'keyboard_client',
                         'move_base_z_client_plugin',
                         'multirole_sensor_client',
                         'ros_publisher_client',
                         'ros_timer_client',
                         'smacc_viewer',
                         'sm_dance_bot',
                         'sm_dance_bot_2',
                         'sm_viewer_sim',
                         'sm_three_some']

os.chdir(workspace_source_folder)
debianfiles = []
for pname in manual_order_packages:
    debianfiles.append(build_deb_package(workspace_source_folder,
                                         pname, identified_install_packages[pname], "xenial", "kinetic"))

create_repo_task = subprocess.Popen(
    "package_cloud repository create smacc", shell=True)
create_repo_task.wait()
